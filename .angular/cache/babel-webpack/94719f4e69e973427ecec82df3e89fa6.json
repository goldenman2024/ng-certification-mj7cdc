{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/goldenman2024/ng-certification-mj7cdc/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/goldenman2024/ng-certification-mj7cdc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/goldenman2024/ng-certification-mj7cdc/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var WeatherService = /*#__PURE__*/(function () {\n  var WeatherService = /*#__PURE__*/function () {\n    function WeatherService(http) {\n      _classCallCheck(this, WeatherService);\n\n      this.http = http;\n      this.apiKey = '5a4b2d457ecbef9eb2a71e480b947604';\n    }\n\n    _createClass(WeatherService, [{\n      key: \"getCurrentDayForecast\",\n      value: function getCurrentDayForecast(zipCode) {\n        var _this = this;\n\n        var apiUrl = \"https://api.openweathermap.org/data/2.5/weather?zip=\".concat(zipCode, \"&appid=\").concat(this.apiKey, \"&units=imperial\");\n        return this.http.get(apiUrl).pipe(tap(function (response) {\n          return console.log('API response: current weather service', response);\n        }), map(function (response) {\n          return _this.mapToForecast(response);\n        }));\n      }\n    }, {\n      key: \"getFiveDayForecast\",\n      value: function getFiveDayForecast(zipCode) {\n        var _this2 = this;\n\n        var apiUrl = \"https://api.openweathermap.org/data/2.5/forecast?zip=\".concat(zipCode, \"&appid=\").concat(this.apiKey, \"&units=imperial\");\n        return this.http.get(apiUrl).pipe(tap(function (response) {\n          return console.log('API response list 5days weather service', response);\n        }), map(function (response) {\n          return _this2.mapToForecasts(response);\n        }));\n      }\n    }, {\n      key: \"mapToForecast\",\n      value: function mapToForecast(response) {\n        var currentDate = new Date(Date.now() + response.timezone * 1000); // Adjust for time zone offset\n\n        var currentDay = this.getDayOfWeek(currentDate.getDay());\n        var currentWeatherForecast = {\n          day: currentDay,\n          skyCondition: response.weather[0].main,\n          tempMax: response.main.temp_max,\n          tempMin: response.main.temp_min,\n          temp: response.main.temp\n        };\n        return {\n          city: response.name,\n          zipCode: '',\n          weather: [currentWeatherForecast]\n        };\n      }\n    }, {\n      key: \"mapToForecasts\",\n      value: function mapToForecasts(response) {\n        var forecasts = [];\n        var uniqueDays = [];\n\n        var _iterator = _createForOfIteratorHelper(response.list),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var forecast = _step.value;\n            var dayOfWeek = this.getDayOfWeek(forecast.dt); // Check if the day already exists in uniqueDays array\n\n            if (!uniqueDays.includes(dayOfWeek)) {\n              uniqueDays.push(dayOfWeek);\n              var weatherForecast = {\n                day: dayOfWeek,\n                skyCondition: forecast.weather[0].main,\n                tempMax: forecast.main.temp_max,\n                tempMin: forecast.main.temp_min,\n                temp: forecast.main.temp\n              };\n              forecasts.push({\n                city: response.city.name,\n                zipCode: response.city.zipCode,\n                weather: [weatherForecast]\n              });\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return forecasts;\n      }\n    }, {\n      key: \"getDayOfWeek\",\n      value: function getDayOfWeek(timestamp) {\n        var milliseconds = timestamp * 1000; // Convert seconds to milliseconds\n\n        var date = new Date(milliseconds); // Adjust the timezone to UTC\n\n        var utcDate = new Date(date.getTime() + date.getTimezoneOffset() * 60000); // Get the day of the week\n\n        var options = {\n          weekday: 'long'\n        }; // Specify 'long' as a const value\n\n        var dayOfWeek = new Intl.DateTimeFormat('en-US', options).format(utcDate);\n        return dayOfWeek;\n      }\n    }]);\n\n    return WeatherService;\n  }();\n\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherService;\n})();","map":null,"metadata":{},"sourceType":"module"}